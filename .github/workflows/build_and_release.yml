name: Build and Release Linux Packages

on:
  push:
    tags:
      - "v*.*.*" # Trigger on version tags like v0.1.0

jobs:
  build_linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10" # Or your desired Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller # Ensure PyInstaller is installed

      - name: Install Linux build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential
          sudo gem install fpm

      - name: Build Linux packages
        run: python build_scripts/build_linux_packages.py

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-alpha') || contains(github.ref_name, '-beta') }} # Mark as pre-release if tag contains -rc, -alpha, or -beta

      - name: Upload DEB Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/flower-edge-detection_${{ env.APP_VERSION }}_amd64.deb # Assuming APP_VERSION is accessible or hardcode/derive it
          asset_name: flower-edge-detection_${{ github.ref_name }}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload RPM Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/flower-edge-detection-${{ env.APP_VERSION }}-1.x86_64.rpm # Assuming APP_VERSION is accessible or hardcode/derive it
          asset_name: flower-edge-detection-${{ github.ref_name }}-1.x86_64.rpm
          asset_content_type: application/x-rpm

  # Placeholder for Windows build (to be implemented)
  # build_windows:
  #   runs-on: windows-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     # ... (Python setup, dependencies, build steps for Windows) ...
  #     # ... (Upload Windows executable/installer to release) ...

  # Placeholder for macOS build (to be implemented)
  # build_macos:
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     # ... (Python setup, dependencies, build steps for macOS) ...
  #     # ... (Upload macOS .app/.dmg to release) ...
# Note: To get APP_VERSION in the upload steps, you might need to:
# 1. Read it from the build script if possible (e.g., python -c "from build_scripts.build_linux_packages import APP_VERSION; print(APP_VERSION)")
# 2. Or, parse it from the github.ref_name (tag name) if it matches the app version directly.
# For simplicity, the asset_name uses github.ref_name which should be like 'v0.1.0'.
# The asset_path might need adjustment if APP_VERSION isn't directly available as an env var.
# A more robust way for asset_path:
# asset_path: ./dist/flower-edge-detection_${{ steps.get_version.outputs.version }}_amd64.deb
# (Requires a step 'get_version' that extracts version from tag)
# Example for get_version step:
#      - name: Get version from tag
#        id: get_version
#        run: echo "::set-output name=version::${GITHUB_REF_NAME#v}"
# Then use ${{ steps.get_version.outputs.version }} for asset paths.
# For now, I've used a simplified approach assuming the build script outputs files with a known version or the tag matches.
# The current asset_path for .deb and .rpm uses a placeholder ${{ env.APP_VERSION }} which needs to be correctly set.
# A better approach for asset_path:
# DEB: ./dist/flower-edge-detection_${{ github.ref_name # Remove 'v' prefix }}_amd64.deb
# RPM: ./dist/flower-edge-detection-${{ github.ref_name # Remove 'v' prefix }}-1.x86_64.rpm
# Let's refine the asset paths in the next step if this basic structure is okay.
# For now, I'll use a step to extract the version from the tag.

# Refined version extraction and usage:
#      - name: Get version from tag
#        id: get_version
#        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
#
# Then use ${{ env.VERSION }} in asset_path.
# The create-release action already uses github.ref_name, so asset names are fine.
# The asset_path needs the version without 'v'.
# Let's modify the workflow to include this.
