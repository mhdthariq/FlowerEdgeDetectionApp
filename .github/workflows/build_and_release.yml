name: Build and Release Packages

on:
  push:
    tags:
      - "v*.*.*" # Trigger on version tags like v0.1.0

jobs:
  create_release_job: # Renamed job for clarity
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-alpha') || contains(github.ref_name, '-beta') }}

  build_linux:
    name: Build Linux Packages
    runs-on: ubuntu-latest
    needs: create_release_job # Depends on release creation
    env: # Define VERSION at the job level
      VERSION: ${{ needs.create_release_job.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Install Linux build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential
          sudo gem install fpm

      - name: Install X11/Qt dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxkbcommon-x11-0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-render-util0 \
            libxcb-xinerama0 \
            libxcb-xkb1 \
            libxcb-shape0 \
            libxcb-randr0 \
            libxcb-cursor0 \
            libfontconfig1 \
            libgl1

      - name: Build Linux packages
        env:
          APP_BUILD_VERSION: ${{ env.VERSION }} # Access job-level env var
        run: python build_scripts/build_linux_packages.py

      - name: Upload DEB Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release_job.outputs.upload_url }}
          asset_path: ./dist/flower-edge-detection_${{ env.VERSION }}_amd64.deb
          asset_name: flower-edge-detection-linux-${{ env.VERSION }}_amd64.deb # Added platform
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload RPM Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release_job.outputs.upload_url }}
          asset_path: ./dist/flower-edge-detection-${{ env.VERSION }}-1.x86_64.rpm
          asset_name: flower-edge-detection-linux-${{ env.VERSION }}-1.x86_64.rpm # Added platform
          asset_content_type: application/x-rpm

  build_windows:
    name: Build Windows Packages
    runs-on: windows-latest
    needs: create_release_job # Depends on release creation
    env: # Define VERSION at the job level
      VERSION: ${{ needs.create_release_job.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller Pillow
        shell: pwsh

      - name: Install NSIS
        run: choco install nsis --no-progress
        shell: pwsh

      - name: Build Windows executable and installer
        env:
          APP_BUILD_VERSION: ${{ env.VERSION }} # Access job-level env var
        run: python build_scripts/build_windows_exe.py
        shell: pwsh

      - name: Upload Windows Executable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release_job.outputs.upload_url }}
          asset_path: ./dist/FlowerEdgeDetection-${{ env.VERSION }}.exe
          asset_name: FlowerEdgeDetection-windows-${{ env.VERSION }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload Windows Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release_job.outputs.upload_url }}
          asset_path: ./dist/FlowerEdgeDetection-${{ env.VERSION }}_Setup.exe
          asset_name: FlowerEdgeDetection-windows-setup-${{ env.VERSION }}.exe
          asset_content_type: application/octet-stream

  # Placeholder for macOS build (to be implemented)
  # build_macos:
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     # ... (Python setup, dependencies, build steps for macOS) ...
  #     # ... (Upload macOS .app/.dmg to release) ...
